package com.example.puppyplace;

import android.content.Intent;
import android.content.SharedPreferences;
import android.os.Bundle;
import android.text.TextUtils;
import android.view.View;
import android.widget.Button;
import android.widget.EditText;
import android.widget.TextView;
import android.widget.Toast;

import androidx.annotation.NonNull;
import androidx.appcompat.app.AppCompatActivity;

import com.google.firebase.database.DataSnapshot;
import com.google.firebase.database.DatabaseError;
import com.google.firebase.database.DatabaseReference;
import com.google.firebase.database.FirebaseDatabase;
import com.google.firebase.database.ValueEventListener;

public class Login extends AppCompatActivity {

    private EditText loginUsername, loginPassword;
    private Button loginButton;
    private TextView signupRedirectText;
    private DatabaseReference usersRef;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_login);

        loginUsername = findViewById(R.id.login_username);
        loginPassword = findViewById(R.id.login_password);
        loginButton = findViewById(R.id.login_button);
        signupRedirectText = findViewById(R.id.signupRedirectText);

        usersRef = FirebaseDatabase.getInstance().getReference("users");

        loginButton.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                loginUser();
            }
        });

        signupRedirectText.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                Intent intent = new Intent(Login.this, Signup.class);
                startActivity(intent);
            }
        });
    }

    private void loginUser() {
        String username = loginUsername.getText().toString().trim();
        String password = loginPassword.getText().toString().trim();

        if (TextUtils.isEmpty(username)) {
            loginUsername.setError("Username is required");
            return;
        }

        if (TextUtils.isEmpty(password)) {
            loginPassword.setError("Password is required");
            return;
        }

        authenticateUser(username, password);
    }

    private void authenticateUser(final String username, final String password) {
        // Check for admin credentials
        if ("admin".equals(username) && "admin123".equals(password)) {
            saveLoggedInUser(username, "admin");
            Toast.makeText(Login.this, "Admin Login successful", Toast.LENGTH_SHORT).show();
            navigateToActivity(AdminPanelActivity.class);
            return;
        }

        // Proceed with user authentication for users with autogenerated keys
        usersRef.addListenerForSingleValueEvent(new ValueEventListener() {
            @Override
            public void onDataChange(@NonNull DataSnapshot snapshot) {
                boolean userFound = false;

                for (DataSnapshot userSnapshot : snapshot.getChildren()) {
                    String dbUsername = userSnapshot.child("username").getValue(String.class);
                    String dbPassword = userSnapshot.child("password").getValue(String.class);

                    if (dbUsername != null && dbUsername.equals(username)) {
                        userFound = true;
                        if (dbPassword != null && dbPassword.equals(password)) {
                            saveLoggedInUser(username, "user");
                            Toast.makeText(Login.this, "Login successful", Toast.LENGTH_SHORT).show();
                            navigateToActivity(HomeActivity.class);
                            return; // Exit the method once logged in
                        } else {
                            showErrorToast("Incorrect password");
                            return; // Exit on incorrect password
                        }
                    }
                }

                if (!userFound) {
                    showErrorToast("User not found");
                }
            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {
                showErrorToast("Database error: " + error.getMessage());
            }
        });
    }

    private void saveLoggedInUser(String username, String userType) {
        SharedPreferences sharedPreferences = getSharedPreferences("user_prefs", MODE_PRIVATE);
        SharedPreferences.Editor editor = sharedPreferences.edit();
        editor.putString("logged_in_user", username);
        editor.putString("user_type", userType);
        editor.apply();
    }

    private void navigateToActivity(Class<?> activityClass) {
        Intent intent = new Intent(Login.this, activityClass);
        startActivity(intent);
        finish();
    }

    private void showErrorToast(String message) {
        Toast.makeText(Login.this, message, Toast.LENGTH_SHORT).show();
    }
}
